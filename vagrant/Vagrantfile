# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-22.04"
  #config.vm.box_version = "1.0.0"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "16384"
    vb.cpus = 6

    # Use more memory for graphics
    vb.customize ["modifyvm", :id, "--vram", "256"]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # step1 provisioning as root user:
  config.vm.provision "shell", inline: <<-SHELL
   
    echo "init:"
    apt-get update
    apt-get dist-upgrade
    apt-get install -y snapd
    apt-get autoremove -y
    apt-get autoclean -y

    echo "install docker:"
    addgroup --system docker
    adduser vagrant docker
    newgrp docker

    snap install docker --classic
    snap start dockerd

    echo "install xfce with thunar and firefox:"
    apt-get install -y xserver-xorg xserver-xorg-core xfonts-base xinit x11-xserver-utils
    apt-get install -y xfwm4 xfce4-panel xfce4-settings xfce4-session xfce4-terminal xfdesktop4 xfce4-taskmanager tango-icon-theme
    apt-get install -y lightdm lightdm-gtk-greeter
    apt-get install -y thunar

    echo "install guest additions:"
    add-apt-repository multiverse
    apt update
    apt-get install -y virtualbox-guest-utils virtualbox-guest-x11

    echo "install firefox:"
    snap install firefox

    echo "install developer tools:"
    snap install code --classic
    snap install node --classic
    snap install intellij-idea-community --classic

    echo "install zsf with some additions for ohmyzsh:"
    apt-get install -y git curl zsh sed fonts-powerline zip guake neofetch

    echo "switch shell to zsh:"
    chsh -s $(which zsh) vagrant

  SHELL


  # Reboot:
  config.vm.provision 'shell', reboot: true


  # step2 provisioning as vagrant user:
  config.vm.provision "shell", privileged: false, inline: <<-SHELL

    echo "current home = $HOME"

    echo "install intellij scala plugin"
    sh /snap/intellij-idea-community/current/bin/idea.sh installPlugins org.intellij.scala

    echo "install ohmyzsh:"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="agnoster"/g' ~/.zshrc

    echo "install sdkman and sbt, scala and java:"
    curl -s "https://get.sdkman.io" | bash

    chmod a+x "/home/vagrant/.sdkman/bin/sdkman-init.sh"
    set -x \
    && echo "sdkman_auto_answer=true" > /home/vagrant/.sdkman/etc/config \
    && echo "sdkman_auto_selfupdate=false" >> /home/vagrant/.sdkman/etc/config \
    && echo "sdkman_insecure_ssl=false" >> /home/vagrant/.sdkman/etc/config

    source "/home/vagrant/.sdkman/bin/sdkman-init.sh"
    sdk install java 17.0.9-tem
    sdk install scala 3.2.2
    sdk install sbt 1.8.3

    echo "clone git repo \"tictactoe\""
    mkdir /home/vagrant/git
    cd /home/vagrant/git
    git clone https://github.com/fmantz/tictactoe.git
    cd /home/vagrant/git/tictactoe
    git checkout workshop-3

    mkdir /home/vagrant/.config/autostart
  SHELL

  # step 3 copy files:
  config.vm.provision "file", source: "guake.desktop", destination: "/home/vagrant/.config/autostart/guake.desktop"

  # info:
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    source "/home/vagrant/.zshrc"
    echo "current shell = $SHELL"
    neofetch
    java  -version
    scala -version
    sbt   -version
    echo "node.js version:"
    node  -v
  SHELL

end
